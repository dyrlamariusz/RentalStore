@page "/forms"
@inject IRentalClientService RentalService

@*<EditForm Model="@rental" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />*@

    <div class="container">
        <div class="d-flex justify-content-center align-items-center" >
            <div class="col-md-6">
                <h1 class="text-center mb-4">Make an order</h1>
                <form style="width: 100%;">
               
                    <div class="form-outline mb-4">
                        <input type="text" id="name" class="form-control shadow" @bind="rental.CustomerName" />
                        <label class="form-label" for="name">Name</label>
                    </div>
                
                    <div class="form-outline mb-4">
                        <input type="text" id="surname" class="form-control shadow" @bind="rental.CustomerSurname" />
                        <label class="form-label" for="surname">Surname</label>
                    </div>

                    <div class="form-outline mb-4">
                        <input type="email" id="email" class="form-control shadow" @bind="rental.CustomerEmail" />
                        <label class="form-label" for="email">Email address</label>
                    </div>

                    <div class="form-outline mb-4">
                    <input type="phone" id="phone" class="form-control shadow"@bind="rental.CustomerPhone" />
                        <label class="form-label" for="phone">Phone</label>
                    </div>

                <button type="button" class="btn btn-primary btn-block mb-4" @onclick="HandleSubmit">Send</button>
                </form>
            </div>
        </div>
    </div>
@*</EditForm>*@


@code {
    private CreateRentalDto rental = new CreateRentalDto
        {
            EquipmentId = 1, // Stała wartość dla EquipmentId
            Quantity = 3, // Stała wartość dla ilości
            RentalDate = DateTime.UtcNow, // Stała wartość dla RentalDate
            ReturnDate = DateTime.UtcNow.AddDays(7), // Stała wartość dla ReturnDate (np. 7 dni od dzisiaj)
            Status = RentalStore.Domain.Models.Rental.RentalStatus.Active // Stała wartość dla Status
        };

    private async Task HandleSubmit()
    {
        try
        {
            await RentalService.CreateRentalAsync(rental);
            // Tutaj możesz dodać kod obsługujący sukces
        }
        catch (Exception ex)
        {
            // Tutaj możesz dodać kod obsługujący błędy
        }
    }
}

@*@code {
    private CreateRentalDto rental = new CreateRentalDto();

    protected override void OnInitialized()
    {
        // Assuming you pass the EquipmentId as a query parameter
        if (NavigationManager.TryGetQueryString<int>("equipmentId", out var equipmentId))
        {
            rental.EquipmentId = equipmentId;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await RentalService.CreateRentalAsync(rental);
            // Display success message
            Console.WriteLine("Rental created successfully");
        }
        catch (Exception ex)
        {
            // Display error message
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}*@