@page "/"
@inject IEquipmentService EquipmentService
@inject ICategoryService CategoryService
@inject IRentalService RentalService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Manage Equipment</h3>
    <button class="btn btn-primary" @onclick="ShowAddModal">Add Equipment</button>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <input class="form-control" type="text" placeholder="Search by name..." @bind="searchTerm" />
    </div>
    <div class="col-md-4">
        <select class="form-control" @bind="selectedCategory">
            <option value="" disabled selected>Search by category...</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </select>
    </div>
    <div class="col-md-4 d-flex align-items-end position-relative">
        <select class="form-control" @bind="sortOrder">
            <option value="" disabled selected>Sort by...</option>
            <option value="price_asc">Price Ascending</option>
            <option value="price_desc">Price Descending</option>
        </select>
        <div class="position-relative">
            <button class="btn btn-secondary" @onclick="FilterEquipment">Filter</button>
            @if (isFilterApplied)
            {
                <button class="btn btn-danger clear-button" @onclick="ClearFilters">Clear</button>
            }
        </div>
    </div>
</div>

@if (filteredEquipments == null)
{
    <p>Loading...</p>
}
else if (!filteredEquipments.Any())
{
    <p>No equipment found.</p>
}
else
{
    <table class="table table-striped table-bordered fancy-table">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Brand</th>
                <th>Model</th>
                <th>Availability</th>
                <th>Condition</th>
                <th>Size</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in filteredEquipments)
            {
                <tr>
                    <td>@equipment.EquipmentId</td>
                    <td>@equipment.Name</td>
                    <td>@equipment.CategoryName</td>
                    <td>@equipment.Brand</td>
                    <td>@equipment.Model</td>
                    <td>@(equipment.Availability ? "Yes" : "No")</td>
                    <td>@equipment.Condition</td>
                    <td>@equipment.Size</td>
                    <td>@equipment.QuantityInStock</td>
                    <td>@equipment.PricePerDay.ToString("C")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ShowEditModal(equipment)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEquipment(equipment.EquipmentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    .table-responsive {
        margin-top: 20px;
    }

    .fancy-table {
        width: 100%;
        border-collapse: collapse;
    }

    .fancy-table th, .fancy-table td {
        padding: 10px;
        text-align: left;
    }

    .fancy-table th {
        background-color: #343a40;
        color: white;
    }

    .fancy-table tbody tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .fancy-table tbody tr:hover {
        background-color: #ddd;
    }

    .btn-sm {
        margin-right: 5px;
    }

    .clear-button {
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        opacity: 1;
    }

    .me-2 {
        margin-right: 0.5rem;
    }
</style>

<AddOrUpdateEquipment @ref="addEditModal" OnSubmit="RefreshEquipment" />

@code {
    private IEnumerable<EquipmentDto> equipments;
    private IEnumerable<EquipmentDto> filteredEquipments;
    private IEnumerable<CategoryDto> categories;
    private AddOrUpdateEquipment addEditModal;

    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortOrder = "name_asc";
    private bool isFilterApplied = false;

    protected override void OnInitialized()
    {
        LoadEquipment();
        categories = CategoryService.GetAll();
    }

    private void LoadEquipment()
    {
        equipments = EquipmentService.GetAll();
        FilterAndSortEquipment();
    }

    private void FilterAndSortEquipment(bool isApplied = false)
    {
        filteredEquipments = equipments;

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredEquipments = filteredEquipments.Where(e => e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedCategory) && selectedCategory != "All Categories")
        {
            filteredEquipments = filteredEquipments.Where(e => e.CategoryId == int.Parse(selectedCategory));
        }

        filteredEquipments = sortOrder switch
        {
            "price_asc" => filteredEquipments.OrderBy(e => e.PricePerDay),
            "price_desc" => filteredEquipments.OrderByDescending(e => e.PricePerDay),
            _ => filteredEquipments
        };

        isFilterApplied = isApplied;
    }

    private void FilterEquipment()
    {
        FilterAndSortEquipment(true);
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        sortOrder = "name_asc";
        isFilterApplied = false;
        LoadEquipment();
    }

    private bool IsAnyFilterApplied()
    {
        return isFilterApplied;
    }

    private void DeleteEquipment(int id)
    {
        EquipmentService.Delete(id);
        LoadEquipment();
    }

    private void ShowAddModal()
    {
        addEditModal.Show();
    }

    private void ShowEditModal(EquipmentDto equipment)
    {
        addEditModal.Show(equipment);
    }

    private void RefreshEquipment()
    {
        LoadEquipment();
    }
}













@* @page "/search.equipment"
@inject IEquipmentService EquipmentService
@inject ICategoryService CategoryService

<h3>Equipment</h3>

<button class="brn btn-primary mb-3" @onclick="ShowAddModal">Add Equipment</button>

@if (equipments == null)
{
    <p>Loading...</p>
}
else if (!equipments.Any())
{
    <p>No equipment found.</p>
}
else
{
    <div class="table-responsive">
    <table class="table table-striped table-bordered fancy-table">
        <thead class="thead-dark"> 
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Brand</th>
                <th>Model</th>
                <th>Availability</th>
                <th>Condition</th>
                <th>Size</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>@equipment.EquipmentId</td>
                    <td>@equipment.Name</td>
                    <td>@equipment.CategoryName</td>
                    <td>@equipment.Brand</td>
                    <td>@equipment.Model</td>
                    <td>@equipment.Availability</td>
                    <td>@equipment.Condition</td>
                    <td>@equipment.Size</td>
                    <td>@equipment.QuantityInStock</td>
                    <td>@equipment.PricePerDay</td>
                    <td>
                        <button class="btn-primary" @onclick="() => ShowEditModal(equipment)">Edit</button>
                        <button class="btn-danger" @onclick="() => DeleteEquipment(equipment.EquipmentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}

<style>
    .table-responsive {
    margin-top: 20px;
}

.fancy-table {
    width: 100%;
    border-collapse: collapse;
}

.fancy-table th, .fancy-table td {
    padding: 10px;
    text-align: left;
}

.fancy-table th {
    background-color: #343a40;
    color: white;
}

.fancy-table tbody tr:nth-child(even) {
    background-color: #f2f2f2;
}

.fancy-table tbody tr:hover {
    background-color: #ddd;
}

.btn-sm {
    margin-right: 5px;
}

    .clear-button {
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        opacity: 0.9;
    }
    .me-2 {
        margin-right: 0.5rem;
    }

</style>

<AddOrUpdateEquipment @ref="addEditModal" OnSubmit="RefreshEquipments" />

@code {
    private IEnumerable<EquipmentDto> equipments;
    private AddOrUpdateEquipment addEditModal;

    protected override void OnInitialized()
    {
        LoadEquipment();
    }

    private async Task LoadEquipment()
    {
        equipments = EquipmentService.GetAll();
    }

    private async Task DeleteEquipment(int id)
    {
        EquipmentService.Delete(id);
        LoadEquipment();
    }

    private void ShowAddModal()
    {
        addEditModal.Show();
    }

    private void ShowEditModal(EquipmentDto equipment)
    {
        addEditModal.Show(equipment);
    }

    private async Task RefreshEquipments()
    {
        await LoadEquipment();
    }
} *@





@* @page "/equipments"
@inject IEquipmentService EquipmentService
@inject ICategoryService CategoryService

<h3>Equipments</h3>

<button @onclick="ShowAddModal">Add Equipment</button>

@if (equipments == null)
{
    <p>Loading...</p>
}
else if (!equipments.Any())
{
    <p>No equipment found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Brand</th>
                <th>Model</th>
                <th>Availability</th>
                <th>Condition</th>
                <th>Size</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>@equipment.EquipmentId</td>
                    <td>@equipment.Name</td>
                    <td>@equipment.CategoryName</td>
                    <td>@equipment.Brand</td>
                    <td>@equipment.Model</td>
                    <td>@equipment.Availability</td>
                    <td>@equipment.Condition</td>
                    <td>@equipment.Size</td>
                    <td>@equipment.QuantityInStock</td>
                    <td>@equipment.PricePerDay</td>
                    <td>
                        <button class="btn-primary" @onclick ="() => ShowEditModal(equipment)">Edit</button>
                        <button class="btn-danger" @onclick="() => DeleteEquipment(equipment.EquipmentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<EquipmentDto> equipments = new List<EquipmentDto>();
    private AddEditEquipmentModal addEditModal = new AddEditEquipmentModal();

    protected override void OnInitialized()
    {
        equipments = EquipmentService.GetAll();
    }

    private async Task DeleteEquipment(int id)
    {
        EquipmentService.Delete(id);
        equipments = EquipmentService.GetAll();
    }

    private void ShowAddModal()
    {
        addEditModal.Show();
    }

    private void ShowEditModal(EquipmentDto equipment)
    {
        addEditModal.Show(equipment);
    }
}
 *@